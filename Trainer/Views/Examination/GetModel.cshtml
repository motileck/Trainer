@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = @Localizer["Seans"];
}
<div class="row mb-2">
    <div class="col">
        <button type="button" id="start" class="btn btn-success btn-block">@Localizer["Start"]</button>
    </div>
    <div class="col-1">
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">@Localizer["Info"]</button>
    </div>
</div>
<div class="container" style="height: calc(100vh - 200px);">
    <div class="row h-100">
        <div class="col human h-100">
            <div class="row h-25">
                <div class="col-4">
                    <select id="2" class="form-control" style="opacity: 0.5;" onchange='findOption2(this)'>
                        <option value=0></option>
                        <option value=1>@Localizer["Tonometr"]</option>
                        <option value=2>@Localizer["Termometr"]</option>
                        <option value=3>@Localizer["HeartRate"]</option>
                        <option value=4>@Localizer["Oximetr"]</option>
                    </select>
                </div>
            </div>
            <div class="row h-25">
                <div class="col-4">
                    <select id="3" class="form-control" style="opacity: 0.5;" onchange='findOption3(this)'>
                        <option value=0></option>
                        <option value=1>@Localizer["Tonometr"]</option>
                        <option value=2>@Localizer["Termometr"]</option>
                        <option value=3>@Localizer["HeartRate"]</option>
                        <option value=4>@Localizer["Oximetr"]</option>
                    </select>
                </div>
                <div class="col"></div>
                <div class="col-4">
                    <select id="1" class="form-control" style="opacity: 0.5;" onchange='findOption1(this)'>
                        <option value=0></option>
                        <option value=1>@Localizer["Tonometr"]</option>
                        <option value=2>@Localizer["Termometr"]</option>
                        <option value=3>@Localizer["HeartRate"]</option>
                        <option value=4>@Localizer["Oximetr"]</option>
                    </select>
                </div>
            </div>
            <div class="row h-25">
                <div class="col-4"></div>
                <div class="col-4">
                    <select id="4" class="form-control" style="opacity: 0.5;" onchange='findOption4(this)'>
                        <option value="0"></option>
                        <option value=1>@Localizer["Tonometr"]</option>
                        <option value=2>@Localizer["Termometr"]</option>
                        <option value=3>@Localizer["HeartRate"]</option>
                        <option value=4>@Localizer["Oximetr"]</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="col h-100" style="overflow-y: auto;">
            <div class="row h-25">
                <div class="col tonometr"></div>
                <div class="col">
                    <button type="button" id="testTonometr" class="btn btn-primary mt-1">@Localizer["Test"]</button>

                    <div class="form-check">
                        <input class="form-check-input" value="1" type="radio" name="tonometr" id="tonometrON" onclick="tonometrClick(this);">
                        <label class="form-check-label" for="tonometrON">
                            @Localizer["On"]
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" value="0" type="radio" name="tonometr" id="tonometrOFF" onclick="tonometrClick(this);" checked>
                        <label class="form-check-label" for="tonometrOFF">
                            @Localizer["Off"]
                        </label>
                    </div>
                </div>
            </div>
            <div class="row h-50 mb-5">
                <div class="card">
                    <h4 class="card-header">
                        @Localizer["MeasureDiaSis"]
                    </h4>
                    <div class="card-body">
                        <canvas id="myChart" height="300" width="500">@Localizer["ChartLoad"]</canvas>
                    </div>
                </div>
            </div>
            <div class="row h-25">
                <div class="col termometr"></div>
                <div class="col">
                    <button type="button" id="testTermometr" class="btn btn-primary mt-1">@Localizer["Test"]</button>
                    <div class="form-check">
                        <input class="form-check-input" value="1" type="radio" name="termometr" id="termometrON" onclick="termometrClick(this);">
                        <label class="form-check-label" for="termometrON">
                            @Localizer["On"]
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" value="0" type="radio" name="termometr" id="termometrOFF" onclick="termometrClick(this);" checked>
                        <label class="form-check-label" for="termometrOFF">
                            @Localizer["Off"]
                        </label>
                    </div>
                </div>
            </div>
            <div class="row h-50 mb-5">
                <div class="card">
                    <h4 class="card-header">
                        @Localizer["MeasureTemp"]
                    </h4>
                    <div class="card-body">
                        <canvas id="myChart1" width="500" height="300">@Localizer["ChartLoad"]</canvas>
                    </div>
                </div>
            </div>
            <div class="row h-25">
                <div class="col heartrate"></div>
                <div class="col">
                    <button type="button" id="testHeartrate" class="btn btn-primary mt-1">@Localizer["Test"]</button>
                    <div class="form-check">
                        <input class="form-check-input" value="1" type="radio" name="heartrate" id="heartrateON" onclick="heartrateClick(this);">
                        <label class="form-check-label" for="heartrateON">
                            @Localizer["On"]
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" value="0" type="radio" name="heartrate" id="heartrateOFF" onclick="heartrateClick(this);" checked>
                        <label class="form-check-label" for="heartrateOFF">
                            @Localizer["Off"]
                        </label>
                    </div>
                </div>
            </div>
            <div class="row h-50 mb-5">
                <div class="card">
                    <h4 class="card-header">
                        @Localizer["MeasureHeart"]
                    </h4>
                    <div class="card-body">
                        <canvas id="myChart2" width="500" height="300">@Localizer["ChartLoad"]</canvas>
                    </div>
                </div>
            </div>
            <div class="row h-25">
                <div class="col oximetr"></div>
                <div class="col">
                    <button type="button" id="testOximetr" class="btn btn-primary mt-1">@Localizer["Test"]</button>
                    <div class="form-check">
                        <input class="form-check-input" value="1" type="radio" name="oximetr" id="oximetrON" onclick="oximetrClick(this);">
                        <label class="form-check-label" for="oximetrON">
                            @Localizer["On"]
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" value="0" type="radio" name="oximetr" id="oximetrOFF" onclick="oximetrClick(this);" checked>
                        <label class="form-check-label" for="oximetrOFF">
                            @Localizer["Off"]
                        </label>
                    </div>
                </div>
            </div>
            <div class="row h-50 mb-5">
                <div class="card">
                    <h4 class="card-header">
                        @Localizer["MeasureSpO2"]
                    </h4>
                    <div class="card-body">
                        <canvas id="myChart3" width="500" height="300">@Localizer["ChartLoad"]</canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">@Localizer["Info"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <span>@Localizer["Patient"]: @Model.Patient.LastName @Model.Patient.FirstName @Model.Patient.MiddleName</span>
                </div>
                <div class="row">
                    <span>@Localizer["Age"]: @Model.Patient.Age</span>
                </div>
                <div class="row">
                    <span>@Localizer["Sex"]: @Model.Patient.Sex</span>
                </div>
                <div class="row">
                    <span>@Localizer["Date"]: @Model.Date</span>
                </div>
                <div class="row">
                    <span>@Localizer["TypePhysicalActive"]: @Model.TypePhysicalActive</span>
                </div>
                <div class="row">
                    <span>@Localizer["Measure"]:</span>
                </div>
                <ul>
                    @if (Model.Indicator1)
                    {
                        <li>@Localizer["DiaSis"]</li>
                    }
                    @if (Model.Indicator2)
                    {
                        <li>@Localizer["Temperature"]</li>
                    }
                    @if (Model.Indicator3)
                    {
                        <li>@Localizer["HeartRating"]</li>
                    }
                    @if (Model.Indicator4)
                    {
                        <li>@Localizer["SpO2"]</li>
                    }
                </ul>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js" integrity="sha512-GMGzUEevhWh8Tc/njS0bDpwgxdCJLQBWG3Z2Ct+JGOpVnEmjvNx6ts4v6A2XJf1HOrtOsfhv3hBKpK9kE5z8AQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="~/js/signalr/dist/browser/signalr.min.js"></script>

<script type="text/javascript">
    var connection = new signalR.HubConnectionBuilder().withUrl("/chart").build();
    var statTermometr = -1;
    var statTonometr = -1;
    var statHeartrate = -1;
    var statOximetr = -1;
    var select1 = -1;
    var select2 = -1;
    var select3 = -1;
    var select4 = -1;
    var tonometrValue = 0;
    var termometrValue = 0;
    var heartrateValue = 0;
    var oximetrValue = 0;

    window.onload = function () {

        var ctx = document.getElementById('myChart').getContext('2d');

        window.myChart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Dia',
                    data: [],
                },
                    {
                        label: 'Sis',
                        data: [],
                    }
                ]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step:1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 200,
                        step: 10,
                    }
                }
            }
        });

        var ctx = document.getElementById('myChart1').getContext('2d');

        window.myChart1 = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: '@Localizer["Temperature"]',
                    data: []
                }]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step: 1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 50,
                        step: 2
                    }
                }
            }
        });

        var ctx = document.getElementById('myChart2').getContext('2d');

        window.myChart2 = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: '@Localizer["HeartRating"]',
                    data: []
                }]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step: 1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 100,
                        step: 5,
                    }
                }
            }
        });

        var ctx = document.getElementById('myChart3').getContext('2d');

        window.myChart3 = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: '@Localizer["SpO2"]',
                    data: []
                }]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step: 1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 100,
                        step: 5,
                    }
                }
            }
        });

    }

    connection.on("newTonom", function (time, dia, sis) {

        myChart.data.datasets[0].data.push({
            x: time,
            y: dia
        });
        myChart.data.datasets[1].data.push({
            x: time,
            y: sis
        });
        myChart.update();
    });

    connection.on("newTermom", function (time, temp) {

        myChart1.data.datasets[0].data.push({
            x: time,
            y: temp
        });
        myChart1.update();
    });

    connection.on("newHearRate", function (time, heartRate) {

        myChart2.data.datasets[0].data.push({
            x: time,
            y: heartRate
        });
        myChart2.update();
    });

    connection.on("newOximetr", function (time, separation) {

        myChart3.data.datasets[0].data.push({
            x: time,
            y: separation
        });
        myChart3.update();
    });

    connection.on("statusTonometr", function (status, count) {
        statTonometr = count;
        window.alert("Тонометр " + status);
    });

    connection.on("statusTermometr", function (status, count) {
        statTermometr = count;
        window.alert("Термометр " + status);
    });

    connection.on("statusHeartrate", function (status, count) {
        statHeartrate = count;
        window.alert("Пульсометр " + status);
    });

    connection.on("statusOximetr", function (status, count) {
        statOximetr = count;
        window.alert("Оксиметр " + status);
    });

    connection.on("error", function (messange) {
        window.alert(messange);
    });

    document.getElementById("start").addEventListener("click", function (e) {
        var id = "@ViewBag.Id"
        connection.invoke("ProvideReading", statTermometr.toString(), statTonometr.toString(), statHeartrate.toString(), statOximetr.toString(),
            select1.toString(), select2.toString(), select3.toString(), select4.toString(), tonometrValue.toString(), termometrValue.toString(), heartrateValue.toString(), oximetrValue.toString(), id);
    });

    document.getElementById("testTonometr").addEventListener("click", function (e) {
        connection.invoke("TestTonomert");
    });

    document.getElementById("testTermometr").addEventListener("click", function (e) {
        connection.invoke("TestTermometr");
    });

    document.getElementById("testHeartrate").addEventListener("click", function (e) {
        connection.invoke("TestHeartrate");
    });

    document.getElementById("testOximetr").addEventListener("click", function (e) {
        connection.invoke("TestOximetr");
    });

    function findOption1(select) {
        select1 = select.querySelector(`option[value="${select.value}"]`).value
    }

    function findOption2(select) {
        select2 = select.querySelector(`option[value="${select.value}"]`).value
    }

    function findOption3(select) {
        select3 = select.querySelector(`option[value="${select.value}"]`).value
    }

    function findOption4(select) {
        select4 = select.querySelector(`option[value="${select.value}"]`).value
    }

    function tonometrClick(myRadio) {
        tonometrValue = myRadio.value;
    }

    function termometrClick(myRadio) {
        termometrValue = myRadio.value;
    }

    function heartrateClick(myRadio) {
        heartrateValue = myRadio.value;
    }

    function oximetrClick(myRadio) {
        oximetrValue = myRadio.value;
    }

    connection.start();
</script>
